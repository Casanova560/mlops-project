name: CI/CD Titanic Project - Retrain, Build, Deploy

on:
  push:
    branches:
      - mlops

jobs:
  retraining_model:
    name: Re-train Titanic Model
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run re-training
        run: |
          python retrain.py

      - name: DVC setup
        run: |
          pip install dvc[s3]
          dvc remote add -f myremote s3://${{ secrets.AWS_S3_BUCKET_NAME }}
          dvc remote modify myremote access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          dvc remote modify myremote secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          dvc add model.pkl
          git add model.pkl.dvc .gitignore
          git commit -m "Update: tracked new model with DVC"
          dvc push

  build_and_push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: retraining_model

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/mlops-project:latest .

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/mlops-project:latest

  deploy_to_ec2:
    name: Deploy to EC2 Server
    runs-on: ubuntu-latest
    needs: build_and_push

    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            docker login -u '${{ secrets.DOCKERHUB_USERNAME }}' -p '${{ secrets.DOCKERHUB_PASSWORD }}'
            if docker ps -a --format '{{.Names}}' | grep -Eq '^mlops-project$'; then
              docker stop mlops-project
              docker rm mlops-project
            fi
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/mlops-project:latest
            docker run -d --name mlops-project -p 8000:8000 ${{ secrets.DOCKERHUB_USERNAME }}/mlops-project:latest

